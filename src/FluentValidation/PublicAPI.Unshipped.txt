FluentValidation.FluentValidationPolymorphicPropertyValidatorExtensions
Rocket.Surgery.Conventions.FluentValidationHostBuilderExtensions
Rocket.Surgery.Extensions.FluentValidation.FluentValidationConvention
Rocket.Surgery.Extensions.FluentValidation.FluentValidationConvention.FluentValidationConvention() -> void
Rocket.Surgery.Extensions.FluentValidation.FluentValidationConvention.Register(Rocket.Surgery.Extensions.DependencyInjection.IServiceConventionContext context) -> void
Rocket.Surgery.Extensions.FluentValidation.PolymorphicPropertyValidator<T>
override Rocket.Surgery.Extensions.FluentValidation.PolymorphicPropertyValidator<T>.Validate(FluentValidation.Validators.PropertyValidatorContext context) -> System.Collections.Generic.IEnumerable<FluentValidation.Results.ValidationFailure>
override Rocket.Surgery.Extensions.FluentValidation.PolymorphicPropertyValidator<T>.ValidateAsync(FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<FluentValidation.Results.ValidationFailure>>
static FluentValidation.FluentValidationPolymorphicPropertyValidatorExtensions.UsePolymorphicValidator<T, TProperty>(this FluentValidation.IRuleBuilder<T, TProperty> builder, FluentValidation.IValidatorFactory validatorFactory) -> FluentValidation.IRuleBuilderOptions<T, TProperty>
static Rocket.Surgery.Conventions.FluentValidationHostBuilderExtensions.WithFluentValidation(this Rocket.Surgery.Conventions.IConventionHostBuilder builder) -> Rocket.Surgery.Conventions.IConventionHostBuilder